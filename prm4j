#!/usr/bin/env bash
#
# Compiles, runs and evaluates prm4j aspects with the DaCapo-9.12-bach benchmark using aspectj load-time weaving.
#
# Please note, that you don't need to have prm4j checked out to perform the evaluation. The script will try 
# to build prm4j from source, if located at ../prm4j. So please either keep your prm4j-version up-to-date or locate 
# it somewhere else. If no source-version is found, the current snapshot is retrieved from the maven-repository.
# 
#
# usage:    ./prm4j <list of parametric properties> <list of benchmarks>
#           Runs an evaluation of prm4j monitoring a parametric property in the given list of parametric properties
#           and benchmark in the given list of DacCapo benchmarks.
# examples: ./prm4j HasNext avrora
#           ./prm4j "HasNext UnsafeMapIterator" "avrora h2 tradebeans"
#
# usage:    ./prm4j       (parameterless)
#           Runs an evaluation of prm4j monitoring a parametric properties in {HasNext UnsafeIterator UnsafeMapIterator 
#           SafeSyncCollection SafeSyncMap} using a DacCapo benchmark in {avrora batik eclipse fop h2 jython luindex 
#           pmd sunflow tomcat tradebeans tradesoap xalan}.
#
# notes:    A list of all monitored properties can be found in target/jars/mop; each jar is a property
#           A list of all benchmarks can be found at http://dacapobench.org/benchmarks.html
#           Benchmark "lusearch" is not used because of random crashes in lucine on the evaluation hardware.
#
#
# CONFIGURATION:
invocations=5 # sets the number of JVM invocations
maxIterations=25 # sets the maximal number iterations per JVM invocation

######################################################################################################################

if [ -z "$1" ]; then
	paramProperties="HasNext UnsafeIterator UnsafeMapIterator SafeSyncCollection SafeSyncMap"
else
	paramProperties=$1
fi

if [ -z "$2" ]; then
	benchmarks="avrora batik eclipse fop h2 jython luindex pmd sunflow tomcat tradebeans tradesoap xalan"
else
	benchmarks=$2
fi

# remember directory where this script is called (some benchmarks need absolute paths)
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# check if we have the source
if [ -d ../prm4j ]; then
    echo "Installing current version of prm4j..."
	cd ../prm4j
	mvn install assembly:single -Dmaven.test.skip=false
	cd "${DIR}"
fi

cd "${DIR}"
echo "Resolving maven dependencies... (may take a while)"
mvn dependency:resolve --update-snapshots

# get and process classpath from maven pom
mvn -q dependency:build-classpath -Dmdep.outputFile=dependency-outputfile
tr ':' '\n' < dependency-outputfile > dependency-list

# get classpaths to local maven repo
AJC=$(grep "aspectjtools" dependency-list)
RT=$(grep "aspectjrt" dependency-list)
WEAVER=$(grep "aspectjweaver" dependency-list)
PRM4J=$(grep "prm4j" dependency-list)
GUAVA=$(grep "guava" dependency-list)
APACHEMATH=$(grep "math3" dependency-list)
DACAPO=$(grep "dacapo" dependency-list)

# cleanup tempfiles
rm dependency-outputfile dependency-list

# create working and target directories
rm -rf target
mkdir -p target/classes/META-INF target/jars/prm4j

# compile the aspect into classes
echo "Compiling aspect..."
java -jar $AJC -cp "$GUAVA:$PRM4J:$RT:$DACAPO:$APACHEMATH" src/main/java/prm4j/* -d target/classes -6

# create jar with callback
javac src/main/java/prm4jeval/*.java -d target/classes -cp $DACAPO:$APACHEMATH:$GUAVA
jar cf target/jars/Callback.jar -C target/classes .

echo "Will perform ${invocations} JVM invocations with parametric properties in (${paramProperties}) and benchmarks in (${benchmarks}) until reaching static state (max. $maxIterations iterations)."

# load-time weaving via aspectjweaver, will run the specified number of invocations with up to 25 iterations
for invocation in $(jot $invocations 1) ; do
	for paramProperty in $paramProperties ; do
	
	   # create custom aop-ajc.xml and put in META-INF
	   sed 's/<aspectname>/prm4j.'$paramProperty'/g' src/main/resources/prm4j/aop-ajc.xml > target/classes/META-INF/aop-ajc.xml
	   
	   # repackage each aspect into a single jars with the custom aop-ajc.xml
	   jar cf target/jars/prm4j/${paramProperty}.jar -C target/classes META-INF/aop-ajc.xml -C target/classes prm4j/${paramProperty}.class -C target/classes prm4j/FSM_${paramProperty}.class
	   
	   # cleanup custom aop-ajc.xml
	   rm target/classes/META-INF/aop-ajc.xml
	   	
		for benchmark in $benchmarks ; do
			STATUS=0
				while [ $STATUS -eq 0 ]; do
	    			echo "Starting benchmark [prm4j:$benchmark:$paramProperty] JVM invocation ${invocation}..."
					java -Xmx2048M -javaagent:"${WEAVER}" -Xbootclasspath/a:"$RT" \
						-Dprm4j.logging=true \
						-Dprm4jeval.invocation=${invocation} \
						-Dprm4j.bindingCleaningInterval=5000 \
						-Dprm4j.monitorCleaningInterval=5000 \
						-Dprm4j.checkMonitorValidityOnEachUpdate=true \
						-Dprm4j.linkedListStoredBacklinks=false \
						-Dprm4j.experimentName="${invocation} ${benchmark} ${paramProperty}" \
						-Dprm4j.outputfile=logs/prm4j-stats.log \
						-Dprm4jeval.outputfile=logs/prm4j.log \
						-Dprm4jeval.benchmark=${benchmark} -Dprm4jeval.paramProperty=${paramProperty} \
						-Dprm4jeval.maxIterations=${maxIterations} \
						-cp "$DACAPO:$GUAVA:$PRM4J:$APACHEMATH:${DIR}/target/jars/prm4j/${paramProperty}.jar:${DIR}/target/jars/Callback.jar" \
						Harness --no-validation -c prm4jeval.EvalCallback ${benchmark}
					STATUS=$?
			done
		done
	done
done
